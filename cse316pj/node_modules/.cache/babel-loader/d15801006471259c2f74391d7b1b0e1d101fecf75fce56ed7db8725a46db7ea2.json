{"ast":null,"code":"import sha256 from \"crypto-js/sha256.js\";\nvar UInt32 = function (value) {\n  return value & 0x7fffffff;\n};\n_c = UInt32;\nvar highbit = function (value) {\n  return value & 0x80000000;\n};\n\n// hashutil generates a SHA256 from first name, last name and\n// password. Pass in the 3 strings and the hash is generated\n// and returned.\nexport function hashutil(email, password) {\n  let salt = email;\n  //console.log(\"|\" + salt + \"|\");\n  //console.log(\"|\" + password + \"|\");\n\n  const passhash = sha256(salt + password);\n  let passouthash = \"\";\n  const translations = [\"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n  for (let num of passhash.words) {\n    let n1 = UInt32(num);\n    let n2 = highbit(num);\n    let n1string = n1.toString(16);\n    let n1_1string = n1string.substring(1);\n    let front = n1string.substring(0, 1);\n    if (n2 < 0) {\n      front = translations[parseInt(front, 10)];\n    }\n    let value = front + n1_1string;\n    passouthash += value;\n  }\n  return passouthash;\n}\nvar _c;\n$RefreshReg$(_c, \"UInt32\");","map":{"version":3,"names":["sha256","UInt32","value","_c","highbit","hashutil","email","password","salt","passhash","passouthash","translations","num","words","n1","n2","n1string","toString","n1_1string","substring","front","parseInt","$RefreshReg$"],"sources":["C:/Users/hocha/OneDrive/바탕 화면/jokbo/CSE 316/assignment/assignment4/assignment4/src/hashutil/javascript/Hashutil.js"],"sourcesContent":["import sha256 from \"crypto-js/sha256.js\";\n\nvar UInt32 = function (value) {\n  return value & 0x7fffffff;\n};\n\nvar highbit = function (value) {\n  return value & 0x80000000;\n};\n\n// hashutil generates a SHA256 from first name, last name and\n// password. Pass in the 3 strings and the hash is generated\n// and returned.\nexport function hashutil(email, password) {\n  let salt = email;\n  //console.log(\"|\" + salt + \"|\");\n  //console.log(\"|\" + password + \"|\");\n\n  const passhash = sha256(salt + password);\n\n  let passouthash = \"\";\n\n  const translations = [\"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\n  for (let num of passhash.words) {\n    let n1 = UInt32(num);\n    let n2 = highbit(num);\n\n    let n1string = n1.toString(16);\n    let n1_1string = n1string.substring(1);\n    let front = n1string.substring(0, 1);\n\n    if (n2 < 0) {\n      front = translations[parseInt(front, 10)];\n    }\n    let value = front + n1_1string;\n\n    passouthash += value;\n  }\n  return passouthash;\n}\n\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,qBAAqB;AAExC,IAAIC,MAAM,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC5B,OAAOA,KAAK,GAAG,UAAU;AAC3B,CAAC;AAACC,EAAA,GAFEF,MAAM;AAIV,IAAIG,OAAO,GAAG,SAAAA,CAAUF,KAAK,EAAE;EAC7B,OAAOA,KAAK,GAAG,UAAU;AAC3B,CAAC;;AAED;AACA;AACA;AACA,OAAO,SAASG,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACxC,IAAIC,IAAI,GAAGF,KAAK;EAChB;EACA;;EAEA,MAAMG,QAAQ,GAAGT,MAAM,CAACQ,IAAI,GAAGD,QAAQ,CAAC;EAExC,IAAIG,WAAW,GAAG,EAAE;EAEpB,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAE7D,KAAK,IAAIC,GAAG,IAAIH,QAAQ,CAACI,KAAK,EAAE;IAC9B,IAAIC,EAAE,GAAGb,MAAM,CAACW,GAAG,CAAC;IACpB,IAAIG,EAAE,GAAGX,OAAO,CAACQ,GAAG,CAAC;IAErB,IAAII,QAAQ,GAAGF,EAAE,CAACG,QAAQ,CAAC,EAAE,CAAC;IAC9B,IAAIC,UAAU,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC,CAAC;IACtC,IAAIC,KAAK,GAAGJ,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAEpC,IAAIJ,EAAE,GAAG,CAAC,EAAE;MACVK,KAAK,GAAGT,YAAY,CAACU,QAAQ,CAACD,KAAK,EAAE,EAAE,CAAC,CAAC;IAC3C;IACA,IAAIlB,KAAK,GAAGkB,KAAK,GAAGF,UAAU;IAE9BR,WAAW,IAAIR,KAAK;EACtB;EACA,OAAOQ,WAAW;AACpB;AAAC,IAAAP,EAAA;AAAAmB,YAAA,CAAAnB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}