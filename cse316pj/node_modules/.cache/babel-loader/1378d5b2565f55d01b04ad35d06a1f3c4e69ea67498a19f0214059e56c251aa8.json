{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hocha\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\jokbo\\\\CSE 316\\\\assignment\\\\assignment4\\\\assignment4\\\\src\\\\jsxPages\\\\profileContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProfileContext = /*#__PURE__*/createContext();\nexport const ProfileProvider = ({\n  children\n}) => {\n  _s();\n  const [profileImage, setProfileImage] = useState(\"./user.png\");\n  const [loading, setLoading] = useState(true);\n  const refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    try {\n      const response = await fetch(\"http://localhost:3001/api/token/refresh\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: refreshToken\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to refresh token\");\n      }\n      const data = await response.json();\n      const {\n        accessToken\n      } = data;\n      localStorage.setItem(\"accessToken\", accessToken);\n      console.log(\"Access token refreshed successfully:\", accessToken);\n      return accessToken;\n    } catch (error) {\n      console.error(\"Error refreshing access token:\", error);\n      alert(\"Session expired. Please log in again.\");\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      window.location.href = \"/login\";\n      return null;\n    }\n  };\n  const fetchProfileImage = async () => {\n    const userId = localStorage.getItem(\"userId\");\n    let accessToken = localStorage.getItem(\"accessToken\");\n    console.log(\"Access Token being sent:\", accessToken);\n    if (!userId || !accessToken) {\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:3001/api/user/profile?userId=${userId}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (response.status === 403) {\n        // Access Token 만료 시 Refresh\n        console.log(\"Access Token expired, attempting to refresh...\");\n        accessToken = await refreshAccessToken();\n        if (accessToken) {\n          // Refresh 후 재시도\n          const retryResponse = await fetch(`http://localhost:3001/api/user/profile?userId=${userId}`, {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          });\n          if (retryResponse.ok) {\n            const data = await retryResponse.json();\n            if (data.img_src && data.img_src !== \"\") {\n              setProfileImage(data.img_src);\n            }\n          } else {\n            throw new Error(\"Failed to fetch profile image after token refresh\");\n          }\n        }\n      } else if (response.ok) {\n        const data = await response.json();\n        if (data.img_src && data.img_src !== \"\") {\n          setProfileImage(data.img_src);\n        }\n      } else {\n        throw new Error(\"Failed to fetch profile image\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching profile image:\", error);\n      alert(\"Session expired. Please log in again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchProfileImage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ProfileContext.Provider, {\n    value: {\n      profileImage,\n      setProfileImage,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfileProvider, \"8PK2y9KW1EREk6FfQuQX+g1GrLg=\");\n_c = ProfileProvider;\nvar _c;\n$RefreshReg$(_c, \"ProfileProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","ProfileContext","ProfileProvider","children","_s","profileImage","setProfileImage","loading","setLoading","refreshAccessToken","refreshToken","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","token","ok","Error","data","json","accessToken","setItem","console","log","error","alert","removeItem","window","location","href","fetchProfileImage","userId","get","Authorization","status","retryResponse","img_src","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hocha/OneDrive/바탕 화면/jokbo/CSE 316/assignment/assignment4/assignment4/src/jsxPages/profileContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const ProfileContext = createContext();\r\n\r\nexport const ProfileProvider = ({ children }) => {\r\n    const [profileImage, setProfileImage] = useState(\"./user.png\");\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const refreshAccessToken = async () => {\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        try {\r\n            const response = await fetch(\"http://localhost:3001/api/token/refresh\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ token: refreshToken }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to refresh token\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            const { accessToken } = data;\r\n\r\n            localStorage.setItem(\"accessToken\", accessToken);\r\n            console.log(\"Access token refreshed successfully:\", accessToken);\r\n            return accessToken;\r\n        } catch (error) {\r\n            console.error(\"Error refreshing access token:\", error);\r\n            alert(\"Session expired. Please log in again.\");\r\n            localStorage.removeItem(\"accessToken\");\r\n            localStorage.removeItem(\"refreshToken\");\r\n            window.location.href = \"/login\";\r\n            return null;\r\n        }\r\n    };\r\n    const fetchProfileImage = async () => {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        let accessToken = localStorage.getItem(\"accessToken\");\r\n        console.log(\"Access Token being sent:\", accessToken);\r\n\r\n        if (!userId || !accessToken) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:3001/api/user/profile?userId=${userId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                },\r\n            });\r\n\r\n            if (response.status === 403) {\r\n                // Access Token 만료 시 Refresh\r\n                console.log(\"Access Token expired, attempting to refresh...\");\r\n                accessToken = await refreshAccessToken();\r\n                if (accessToken) {\r\n                    // Refresh 후 재시도\r\n                    const retryResponse = await fetch(`http://localhost:3001/api/user/profile?userId=${userId}`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${accessToken}`,\r\n                        },\r\n                    });\r\n\r\n                    if (retryResponse.ok) {\r\n                        const data = await retryResponse.json();\r\n                        if (data.img_src && data.img_src !== \"\") {\r\n                            setProfileImage(data.img_src);\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Failed to fetch profile image after token refresh\");\r\n                    }\r\n                }\r\n            } else if (response.ok) {\r\n                const data = await response.json();\r\n                if (data.img_src && data.img_src !== \"\") {\r\n                    setProfileImage(data.img_src);\r\n                }\r\n            } else {\r\n                throw new Error(\"Failed to fetch profile image\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching profile image:\", error);\r\n            alert(\"Session expired. Please log in again.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProfileImage();\r\n    }, []);\r\n\r\n    return (\r\n        <ProfileContext.Provider value={{ profileImage, setProfileImage, loading }}>\r\n            {children}\r\n        </ProfileContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}